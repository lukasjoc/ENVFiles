/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*  
* Version - 0.99.00.beta 
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function createShiftArr(step) {

	var space = '    ';
	
	if ( isNaN(parseInt(step)) ) {  // argument is string
		space = step;
	} else { // argument is integer
		switch(step) {
			case 1: space = ' '; break;
			case 2: space = '  '; break;
			case 3: space = '   '; break;
			case 4: space = '    '; break;
			case 5: space = '     '; break;
			case 6: space = '      '; break;
			case 7: space = '       '; break;
			case 8: space = '        '; break;
			case 9: space = '         '; break;
			case 10: space = '          '; break;
			case 11: space = '           '; break;
			case 12: space = '            '; break;
		}
	}

	var shift = ['\n']; // array of shifts
	for(ix=0;ix<100;ix++){
		shift.push(shift[ix]+space); 
	}
	return shift;
}

function vkbeautify(){
	this.step = '    '; // 4 spaces
	this.shift = createShiftArr(this.step);
};


//----------------------------------------------------------------------------


function replace_char(str) {
	return str.replace(/\n/g, " ")
		.replace(/\s+/ig, " ")
		.replace(/ AND /ig, " AND ")
		.replace(/\nAND /ig, " AND ")
		.replace(/ THEN /ig, " THEN ")
		.replace(/ WHEN /ig, " WHEN ")
		.replace(/INSERT OVERWRITE/ig, "INSERT OVERWRITE")
		.replace(/INSERT INTO/ig, "INSERT INTO")
		.replace(/ BETWEEN /ig, " BETWEEN ")
		.replace(/ CASE WHEN /ig, " CASE WHEN ")
		.replace(/ \,CASE WHEN /ig, " ,CASE WHEN ")
		.replace(/ DATEDIFF\(/ig, " DATEDIFF(")
		.replace(/\,DATEDIFF\(/ig, ",DATEDIFF(")
		.replace(/ CEIL\(/ig, " CEIL(")
		.replace(/ FLOOR\(/ig, " FLOOR(")
		.replace(/\,CEIL\(/ig, ",CEIL(")
		.replace(/\,FLOOR\(/ig, ",FLOOR(")
		.replace(/ FROM\(/ig, " FROM (")
		.replace(/ JOIN\(/ig, " JOIN (")
		.replace(/ FROM /ig, "\nFROM ")
		.replace(/ DISTRIBUTE BY /ig, "\nDISTRIBUTE BY ")
		.replace(/ AS /ig, " AS ")
		.replace(/ TABLE /ig, " TABLE ")
		.replace(/ IF EXISTS /ig, " IF EXISTS ")
		.replace(/ HAVING /ig, "\nHAVING ")
		.replace(/ USING /ig, " USING ")
		.replace(/ IN /ig, " IN ")
		.replace(/\s{0,}SELECT /ig, "\nSELECT ")
		.replace(/ WHERE /ig, "\nWHERE ")
		.replace(/ ON /ig, "\nON ")
		.replace(/ JOIN /ig, "\nJOIN ")
		.replace(/ CROSS\nJOIN /ig, "\nCROSS JOIN ")
		.replace(/ INNER\nJOIN /ig, "\nINNER JOIN ")
		.replace(/ LEFT\nJOIN /ig, "\nLEFT JOIN ")
		.replace(/ RIGHT\nJOIN /ig, "\nRIGHT JOIN ")
		// .replace(/ ORDER\s{1,}BY /ig, "\nORDER BY ")
		.replace(/ ORDER\s{1,}BY /ig, " ORDER BY ")
		.replace(/ GROUP\s{1,}BY /ig, "\nGROUP BY ")
		.replace(/ GROUPING\s{1,}SETS/ig, "\nGROUPING SETS")
		.replace(/UNION ALL/ig, "\nUNION ALL\n") 
		.replace(/ LEFT OUTER\nJOIN /ig, "\nLEFT OUTER JOIN ")
		.replace(/ RIGHT OUTER\nJOIN /ig, "\nRIGHT OUTER JOIN ")
		.replace(/ FULL OUTER\nJOIN /ig, "\nFULL OUTER JOIN ")
		.replace(/\s{0,1}DROP /ig, "\nDROP ")
		.replace(/\s{0,1}CREATE /ig, "\nCREATE ")
		.replace(/\s{0,1}INSERT /ig, "\nINSERT ")
		.replace(/(^| )SET /ig, "\nSET ")
		.replace(/ADD JAR/ig, "ADD JAR")
		.replace(/MAX\(/ig, "MAX(")
		.replace(/MIN\(/ig, "MIN(")
		.replace(/SUM\(/ig, "SUM(")
		.replace(/AVG\(/ig, "AVG(")
		.replace(/COUNT\(/ig, "COUNT(")
		.replace(/\s{0,1}LIMIT /ig, "\nLIMIT ")
};

function get_bracket(str) {
	var text = str.replace(/\(/g, "\n\(").replace(/\)/g, "\n\)").replace(/\'/g, "\n\'");
	text_list_orginal = text.split("\n");
	text_list = []
	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i]);
		}
	}

	var text_final = '';
	var left = [];
	var right = [];
	var bracket = [];
	var bracket_back = [];
	var is_colon = 0;

	for (i = 0; i < text_list.length; i++) {
		last_str = i == 0 ? "" : text_list[i - 1];

		if(text_list[i][0] == "'"){
			if(is_colon == 0){
				is_colon += 1
			}else{
				is_colon -= 1
			}
		}

		if (/\(/ig.exec(text_list[i]) && is_colon == 0) {
			if (/FROM |JOIN /.exec(last_str)) {
				left.push(i);
				bracket.push(i);
				bracket_back.push(1);
			} else { // 由于''之间可以随便出现多个（号 所以需要过滤一层条件
					bracket.push(i);
					bracket_back.push(0);
			}
		}

		if (/\)/ig.exec(text_list[i]) && is_colon == 0) {
			if (bracket_back[bracket_back.length - 1] == 1) {
				right.push(i);
			}

			bracket = bracket.slice(0, -1);
			bracket_back = bracket_back.slice(0, -1);
		}
	}

	for (i = 0; i < text_list.length; i++) {
		text_list[i] = text_list[i].replace("\n", "");
	}

	for (i = 0; i < left.length; i++) {
		text_list[left[i]] = '\n' + text_list[left[i]];
		text_list[right[i]] = '\n' + text_list[right[i]];
	}

	for (i = 0; i < text_list.length; i++) {
		if (/\(|\)/ig.exec(text_list[i])) {
			text_final += text_list[i];
		} else {
			text_final += "\n" + text_list[i];
		}
	}

	return text_final.replace(/\n\'/ig, "'") //恢复因为'导致的换行
};

String.prototype.times = function(n) {
	return (new Array(n + 1)).join(this);
};

function bracket_deep(str) {
	var text_final = '';
	var text_list = [];
	var text_list_orginal = str.split("\n");
	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i]);
		}
	}

	var bracket_deep = 0;
	var deep = "\t";

	for (i = 0; i < text_list.length; i++) {

		if (text_list[i].replace(/\t{0,}/, "")[0] == ')') {
			bracket_deep -= 1;}
			
		text_list[i] = deep.times(bracket_deep) + text_list[i];

		if (text_list[i].replace(/\t{0,}/, "")[0] == '(') {
			bracket_deep += 1;
		}

		text_final += "\n" + text_list[i]
	}
	return text_final
};


function select_wrap(text,tag) {
	var text_final = '';
	var bracket_cnt = 0;
	var quote_cnt = 0;
	var text_final_case = '';
	var as_loc = 0;
	var max_as_loc = 0;
	var as_loc_list = [];
	var text_as_final ='';

	for (let i = 0; i < text.length; i++) {
		let p = i;
		if (text[p] == '(' && quote_cnt == 0) {
			bracket_cnt += 1;
		}

		if (text[p] == '"' || text[p] == "'") {
			if(quote_cnt==0){
				quote_cnt += 1;
			} else{
				quote_cnt -= 1;
			}

		}

		if (text[p] == ')' && quote_cnt == 0) {
			if(bracket_cnt > 0){
				bracket_cnt -= 1;
			}
		}

		if (bracket_cnt == 0 && quote_cnt == 0 && text[p] == ',') {
			if(tag == 0){
				text_final += '\n       ' + text[p];
			}
			if(tag == 1){
				text_final += '\n         ' + text[p];
			}

		} else {
			text_final += text[p];
		}
	}
	// text_final = text_final.replace(/SELECT\s{0,}/ig, 'SELECT\n').replace(', ', ',').replace('GROUP BY', 'GROUP BY\n').replace(/\,\s{0,}/ig, ",");
	text_final = text_final.replace(', ', ',').replace('GROUP BY', 'GROUP BY ').replace(/\,\s{0,}/ig, ",").replace('SELECT','SELECT ');

	text_list = text_final.split('\n');

	// 如果else 和 end 对应上面没有 -- 那么就不再换行，如果有就换行
	if(tag == 0){
		for (let i = 0; i < text_list.length; i++){
			if(/       \,CASE WHEN/.exec(text_list[i])){
				// console.log(text_list[i]);
				var case_when_list = text_list[i].replace(/WHEN/ig,'\nWHEN').replace(/ELSE/ig,"\nELSE").replace(/END/ig,"\nEND").split("\n");
				var c = 0;
				var if_comment = 0;
				while (c < case_when_list.length){
					if(c==0){
						text_final_case += '\n' + case_when_list[c] + case_when_list[c+1];
						c += 1;
					}else{
						if((/ELSE/.exec(case_when_list[c]) || /END/.exec(case_when_list[c])) && if_comment == 0){
							text_final_case += case_when_list[c];
						}else{
							text_final_case += '\n             ' + case_when_list[c];
						}

					}
					if(case_when_list[c].indexOf("--") > 0){
						if_comment = 1;
					}else{
						if_comment = 0;
					}
					c += 1;
				}
			}else if(/\SELECT\s{0,}CASE WHEN/.exec(text_list[i])){
				var case_when_list = text_list[i].replace(/WHEN/ig,'\nWHEN').replace(/ELSE/ig,"\nELSE").replace(/END/ig,"\nEND").split("\n");
				var c = 0;
				var if_comment = 0;
				while (c < case_when_list.length){
					if(c==0){
						text_final_case += '\n' + case_when_list[c] + case_when_list[c+1];
						c += 1;
					}else{
						if((/ELSE/.exec(case_when_list[c]) || /END/.exec(case_when_list[c])) && if_comment == 0){
							text_final_case += case_when_list[c];
						}else{
							text_final_case += '\n             ' + case_when_list[c];
						}

					}
					if(case_when_list[c].indexOf("--") > 0){
						if_comment = 1;
					}else{
						if_comment = 0;
					}
					c += 1;
				}
			}
			else{
				text_final_case += '\n' + text_list[i];
			}
		}
	}

	if(tag == 1){
		for (let i = 0; i < text_list.length; i++){
			if(/       \,CASE WHEN/.exec(text_list[i])){
				// console.log(text_list[i]);
				var case_when_list = text_list[i].replace(/WHEN/ig,'\nWHEN').replace(/ELSE/ig,"\nELSE").replace(/END/ig,"\nEND").split("\n");
	
				var c = 0;
				var if_comment = 0;
				while (c < case_when_list.length){
					if(c==0){
						text_final_case += '\n' + case_when_list[c] + case_when_list[c+1];
						c += 1;
					}else{
						if((/ELSE/.exec(case_when_list[c]) || /END/.exec(case_when_list[c])) && if_comment == 0){
							text_final_case += case_when_list[c];
						}else{
							text_final_case += '\n             ' + case_when_list[c];
						}

					}
					if(case_when_list[c].indexOf("--") > 0){
						if_comment = 1;
					}else{
						if_comment = 0;
					}
					c += 1;
				}
			}else if(/GROUP BY\s{0,}CASE WHEN/.exec(text_list[i])){
				var case_when_list = text_list[i].replace(/WHEN/ig,'\nWHEN').replace(/ELSE/ig,"\nELSE").replace(/END/ig,"\nEND").split("\n");
				var c = 0;
				var if_comment = 0;
				while (c < case_when_list.length){
					if(c==0){
						text_final_case += '\n' + case_when_list[c] + case_when_list[c+1];
						c += 1;
					}else{
						if((/ELSE/.exec(case_when_list[c]) || /END/.exec(case_when_list[c])) && if_comment == 0){
							text_final_case += case_when_list[c];
						}else{
							text_final_case += '\n             ' + case_when_list[c];
						}

					}
					if(case_when_list[c].indexOf("--") > 0){
						if_comment = 1;
					}else{
						if_comment = 0;
					}
					c += 1;
				}
			}
			else{
				text_final_case += '\n' + text_list[i];
			}
		}
	}




	// 让as进行对齐

	text_as_list = text_final_case.split('\n');
	
	//获取最大的as 的位置
	for (let i = 0; i < text_as_list.length; i++) {
		if (/ AS /.exec(text_as_list[i])) {
			as_loc = text_as_list[i].indexOf(" AS ");
			if(as_loc >max_as_loc){
				max_as_loc = as_loc;
			}
	}
	as_loc_list.push(as_loc);
}

	//替换as
	for (let i = 0; i < text_as_list.length; i++) {
		if (/ AS /.exec(text_as_list[i])) {
			new_as = " ".times(max_as_loc - as_loc_list[i]) + " AS ";
			text_as_list[i] = text_as_list[i].replace(' AS ', new_as);
			}
	}

	for (i = 0; i < text_as_list.length; i++) {
		if (text_as_list[i] != "" && text_as_list[i] != " ") {
			text_as_final += text_as_list[i] + '\n';
		}
	}
	return text_as_final
};

function and_wrap(text) {
	var text_final = '';
	var if_cnt = 0;
    var if_bracket_cnt = 0;
    var bracket_cnt = 0;
	var between_and_cnt = 0;
	text = text.replace('IF (', 'IF(').replace('IN (', 'IN(').replace('if (', 'IF(').replace('if(', 'IF(');
	text_list = text.split(" ");

	for (let i = 0; i < text_list.length; i++) {
        let t = i;
        last_str = i == 0 ? "" : text_list[i - 1];

		if (/BETWEEN/.exec(text_list[t])) {
			between_and_cnt += 1;
		}

        // 如果and后面本身就跟着括号，等同于存在if(或者in
		if (/IF\(/.exec(text_list[t]) || /IN\(/.exec(text_list[t])) {
            if_cnt += 1;
		}

		if (/\(/.exec(text_list[t]) && if_cnt > 0 && text_list[t].indexOf('IF(') == -1 && text_list[t].indexOf('IN(') == -1) {
			if_bracket_cnt += 1;
		}

		if (/\)/.exec(text_list[t]) && if_cnt > 0 && if_bracket_cnt > 0) {
			if_bracket_cnt -= 1;
		}

		if (/\)/.exec(text_list[t]) && if_cnt > 0 && if_bracket_cnt == 0) {
			if_cnt -= 1;
        }

		for (let p = 0; p < text_list[t].length; p++) {
			if (/\(/.exec(text_list[t][p])){
				bracket_cnt += 1;
			}
			if (/\)/.exec(text_list[t][p])) {
				bracket_cnt -= 1;
			}
		}


		if (/AND/.exec(text_list[t])) {
			if (between_and_cnt == 0 && if_cnt == 0 && bracket_cnt == 0) {
				text_list[t] = '\n' + text_list[t];
			}
			if (between_and_cnt > 0) {
					between_and_cnt -= 1;
			}
			
		}

	}

	for (let i = 0; i < text_list.length; i++) {
		let v = i;
		text_final += text_list[v] + ' ';
		text_final = text_final.replace('IN(', 'IN (');
	}

	return text_final

};

function special_wrap(text) {
	var text_final = '';
	var text_list_orginal = text.split("\n");
	var text_list = [];
	var new_text_list = [];

	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i]);
		}
	}

	for (let i = 0; i < text_list.length; i++) {
		let q = i
		if (text_list[q].slice(0, 6) == 'SELECT') {
			text_list[q] = select_wrap(text_list[q],0);
		}

		if (text_list[q].slice(0, 8) == 'GROUP BY') {
			text_list[q] = select_wrap(text_list[q],1);
		}

		if (text_list[q].slice(0, 5) == 'WHERE') {
			text_list[q] = and_wrap(text_list[q]);
		}

		//增加order by 换行逻辑
		if(/ORDER BY/ig.exec(text_list[q])){
			var left_brkt = 0;
			var right_brkt = 0;
			var ordr_loc = text_list[q].indexOf('ORDER BY') + 8;
			var new_str = text_list[q].slice(ordr_loc,-1);
			for (let t = 0; t < new_str.length; t++){
				if(new_str[t] == '('){
					left_brkt += 1;
				}
				if(new_str[t] == ')'){
					right_brkt += 1;
				}
			}

			if(right_brkt <= left_brkt){
				text_list[q] = text_list[q].replace(' ORDER BY ','\nORDER BY ');
			}
		}
	
		text_final += "\n" + text_list[q];
	
	}

	return text_final;
}

function except_subquery(text){
	var text_final = '';
	var text_list_orginal = text.split("\n");
	var text_list = [];

	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i]);
		}
	}

	var in_bracket_cnt = 0;
	var bracket_cnt = 0;
	var bracket_loc = [];
	var bracket_loc_back = []; //闭

	for (let i = 0; i < text_list.length; i++) {

		if(in_bracket_cnt > 0 && bracket_cnt>0){
			for(let p = 0; p<text_list[i].length;p++){
				if(text_list[i][p] == "("){
					bracket_cnt += 1;
				}
				if(text_list[i][p] == ")"){
					bracket_cnt -= 1;
					if(bracket_cnt == 0){
						bracket_loc_back.push(i);
						break; 
					}
				}


			}

		} 

		if (/IN \($/.exec(text_list[i])) {
			in_bracket_cnt += 1;
			bracket_cnt += 1;
			bracket_loc.push(i);
		}
	}

	for (let i = 0; i < text_list.length; i++) {
		var if_return = 0;
		if(bracket_loc.length > 0){
			for(let q = 0; q < bracket_loc.length; q++){
				if(i>bracket_loc[q] && i <= bracket_loc_back[q]){
					if_return = 1;
					break;
				}
			}

			if(if_return > 0){
				text_final += " " + text_list[i];
			} else{
				text_final += "\n" + text_list[i];
			}
			
		}else{
			text_final += "\n" + text_list[i];
		}
	}

	return text_final
};

function ddl(str){
	var text_final = '';
	var text_list = [];
	var text_list_orginal = str.replace(/\n\s{1,}/ig, "\n")
							   .replace(/BIGINT/ig, "BIGINT")
							   .replace(/DOUBLE/ig, "DOUBLE")
							   .replace(/STRING/ig, "STRING")
							   .replace(/ COMMENT/ig, " COMMENT ")
							   .replace(/ COMMENT '/ig, "COMMENT'")
							   .replace(/ COMMENT "/ig, 'COMMENT"')
							   .replace(/CREATE TABLE/ig, "CREATE TABLE")
							   .replace(/PARTITIONED/ig, "PARTITIONED")
							.split("\n");
	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i].replace(/\s{1,}/ig, " "));
		}
	}
	
	var col_name = [];
	var col_len = [];
	var col_type = [];
	var col_type_len = [];
	var col_comment = [];
	var start_end = [];

	for (i = 0; i < text_list.length; i++) {
		if(/STRING|DOUBLE|BIGINT/ig.exec(text_list[i]) && text_list[i].indexOf('PARTITIONED') == -1){
			var new_str_list = text_list[i].replace(/\s{1,}/ig, " ").replace(/,\s{0,}/ig, "").replace(/^\s{1,}/ig, "").split(" ");
			col_name.push(new_str_list[0]);
			col_len.push(new_str_list[0].length)
			col_type.push(new_str_list[1]);
			col_type_len.push(new_str_list[1].length)
			col_comment.push(text_list[i].split("COMMENT")[1]);
			start_end.push(i);
		}

	}

	if(col_name.length >0){
		var col = '';
		if(col_name.length > 0){
			var max_col_name = Math.max.apply(Math,col_len);
			var max_col_type = Math.max.apply(Math,col_type_len);
			for (let q = 0; q < col_name.length; q++){
				if(q==0){
					col += '\n     ';
				} else{
					col += '\n    ,';
				}

				col += col_name[q] + " ".times(max_col_name - col_len[q]) + " " + col_type[q] + " ".times(max_col_type - col_type_len[q]) + " " + "COMMENT " + col_comment[q];
			}
		}
	
		for (let i = 0; i < start_end[0]; i++) {
			if(i == 0){
				text_final += text_list[i];
			} else 
			{
				text_final += "\n" + text_list[i];
			}
		}
	
		text_final =  text_final + col;
	
		for (let i = start_end[start_end.length-1]+1; i < text_list.length; i++) {
			text_final += "\n" + text_list[i];
		}
	
	} else{
		for (let i = 0; i < text_list.length; i++) {
			if(i == 0){
				text_final += text_list[i];
			} else 
			{
				text_final += "\n" + text_list[i];
			}
		}
	}
	return text_final.replace(/COMMENT'/ig, "COMMENT '").replace(/COMMENT"/ig, 'COMMENT "')
}

function extra(str){
	text = str.replace(/^\n/ig, "")
	.replace(/UNION ALL/ig, "\nUNION ALL\n")
	.replace(/\s{0,}\;/ig, ";");
	// .replace(/\;\s{0,}INSERT/ig, ";\n\nINSERT")
	// .replace(/\;\s{0,}DROP/ig, ";\n\nDROP");

	var text_final = '';
	var text_list_orginal = str.split("\n");
	var text_list = [];

	for (i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			text_list.push(text_list_orginal[i]);
		}
	}

	for (let i = 0; i < text_list.length; i++) {
		last_str = i == 0 ? "" : text_list[i - 1];

		if(i > 0){
			text_final += '\n';
		}

		if (i > 0 && (/\s{0,}INSERT/ig.exec(text_list[i]) || /\s{0,}DROP/ig.exec(text_list[i]) || (/^\s{0,}CREATE/ig.exec(text_list[i]) &&  last_str.indexOf('DROP') == -1 && last_str.indexOf('ADD JAR') == -1) || (/^\s{0,}SET/ig.exec(text_list[i]) && last_str.indexOf('SET') == -1))) {
			text_final += '\n' + text_list[i];   //必须不是首行
		} else if(i > 0 && (/\s{0,}SELECT/ig.exec(text_list[i]) && last_str.indexOf(';') >= 0)){
			text_final += '\n' + text_list[i]; 
		}
		else {
			text_final += text_list[i];
		}
	}

	return text_final
}

function reshape_comment(str){
	var text_final = '';
	var text_list_orginal = str.split("\n");
	var text_list = [];

	for (let i = 0; i < text_list_orginal.length; i++) {
		if (text_list_orginal[i] != "" && text_list_orginal[i] != " ") {
			var comment_loc = text_list_orginal[i].indexOf('--')
			if(comment_loc > 0){
				text_list_orginal[i] = text_list_orginal[i].slice(0,comment_loc) + text_list_orginal[i].slice(comment_loc,).replace(/\,/ig," ");
			}
			text_final += "\n" + text_list_orginal[i];
		}
	}
	return text_final
}

vkbeautify.prototype.sql = function(text) {
	step1 = reshape_comment(text);
	step2 = replace_char(step1) ;
	step3 = get_bracket(step2);
	step4 = except_subquery(step3);
	step5 = special_wrap(step4).replace(/\-\-\s{0,}\n/ig, "\n-- ");
	// console.log(step5);
	step6 = bracket_deep(step5); //union all需要单独函数来考虑
	step7 = extra(step6);
	return step7;
}

vkbeautify.prototype.sqlddl = function(text) {
	return ddl(text)
}

module.exports = new vkbeautify();

