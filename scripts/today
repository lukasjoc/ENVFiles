#!/bin/bash
# today the really simple todo command using $EDITOR for writing and a git repo for hosting all things
set -u

today() {
	local todo_name todo_repository todo_collection current_todo

	todo_name="$(date +'%d.%m.%y').md"
	todo_repository="$HOME/.local/share/todo"
	todo_collection="$(date +'%m')_$(date +'%y')"
	current_todo="$todo_repository/$todo_collection/$todo_name"

	printUsage() {
		printf '\n%s\n\n' "Manage todos without overhead and within the workflow"
		printf '%s\n\n' "USAGE:"
		printf '%s\n\n'  " today [ -h ] [ -n <-1...> ] [ . (With: vim) ]
		[ update (With: vim) ]
		[ save ] [ sync ] [ list ]"
	}
	
	createTodo() {
		# create month dir if not present
		if [[ ! -d "$todo_repository/$todo_collection" ]]; then
			mkdir -p "$todo_repository/$todo_collection"
		fi

		if [[ -f "$current_todo" ]]; then
			echo "TODO already exists. Run today to view it."
			return 1
		fi

		vim -c ":read $HOME/.vim/skels/todo.md" "$current_todo"
		return 0
	}

	updateTodo() {
		# create month dir if not present
		if [[ ! -d "$todo_repository/$todo_collection" ]]; then
			mkdir -p "$todo_repository/$todo_collection"
		fi

		vim "$current_todo"
		return 0
	}

	saveTodo() {
		cd "$todo_repository" || exit
		git add "$current_todo" && git commit -m "add current todo $todo_name"
		git push
		cd - || exit
		return 0
	}

	syncTodo() {
		cd "$todo_repository" || exit
		git checkout main
		git pull --rebase --stat origin main
		cd "$OLDPWD" || exit
		return 0
	}

	listTodo() {
		ls -R "$todo_repository"
		return 0
	}
	
	# list todo from specific day eg. -n 5 print the
	# todo of the 5 day of the current month
	listTodoGone() {
		local file day
		day=$( ($(date '+%d') "$1" ) )
		if [[ "$day" -le 9 ]]; then
			day="0$day"
		fi

		file=$day.$(date +'%m.%y').md
		chroma "$todo_repository/$todo_collection/$file"
	}

	# list current todolist for the current day
	if [[ "$#" == "0" ]]; then
		chroma "$current_todo"
		return 0
	fi

	## handle single flags upper and lowercase
	local opt
	local OPTARG
	local OPTIND
	while getopts ":hn:" opt; do
		case ${opt} in
			h) printUsage;;
			n) listTodoGone "$OPTARG";;
			\?) echo "Invalid Option: -$OPTARG" 1>&2;  return 1;;
			:) echo "Required Data: -$OPTARG" 1>&2;  return 1;;
		esac
	done
	
	local cmd
	cmd="${1:-}"; shift
	case "$cmd" in
		new) createTodo;;
		update) updateTodo;;
		save) saveTodo;;
		sync) syncTodo;;
		ls) listTodo;;
	esac

	shift $((OPTIND -1))
}
