#!/bin/bash

makeglobal() {
  if [ $# -eq 0 ]; then
    printf "%s\n" "Usage: makeglobal <current_name_with_extension> <target_name_without_extension>"
    return
  fi
  chmod u+x $1
  cp $1 $2
  mv $2 "/usr/local/bin"
}

cooldocker() {

	local cc=$(docker container ls -aq | wc -l | sed 's/ //g')
	echo -e "\n[\e[36m$cc\e[39m] | CONTAINERS:"
	docker container ls | while read line; do
		
		if `echo $line | grep -q 'CONTAINER ID'`; then
  		echo -e "$line\t IP ADDRESS"
		else
			cid=$(echo $line | awk '{print $1}');
			cip=$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $cid);
    	printf "${line}\t${cip}\n\n"
  	fi
	done;

	local ic=$(docker images -q | wc -l | sed 's/ //g' )
	echo -e "[\e[36m$ic\e[39m] | IMAGES:"
	docker images && echo

	local nc=$(docker network ls -q | wc -l | sed 's/ //g')
	echo -e "[\e[36m$nc\e[39m] | NETS:"
  docker network ls && echo

	local vc=$(docker volume ls -q | wc -l | sed 's/ //g')
	if [ $vc -ge 1 ]; then
		echo -e "[\e[36m$vc\e[39m] | VOLUMES:"
 		docker volume ls && echo
	fi

}

killdocker() {
	docker stop $(docker container ls -aq)
	docker rm $(docker container ls -aq)
	docker volume prune -f
	docker network prune -f
	docker rmi $(docker images -aq)
}

# just submit pre-tested solutions to exercism
exercism_submit() {
  if [ $# -eq 0 ]; then
    printf "%s\n" "Usage: exercism_submit <solution_file>"
    return
  fi

	if ! command -v exercism >/dev/null 2>&1; then
    echo "Exercism is not installed... "
    return
  fi
  exercism submit $1
}

# Average ping time
pingtime(){
  if [ $# -ge 1 ]; then
    echo "Pinging $1 6 times..."
    ping -c 6 $1 | tail -1 | awk '{print $4}' | cut -d '/' -f 2
    return
  fi
  echo "Pinging 8.8.8.8 (dns.google.) 6 times..."
  ping -c 6 8.8.8.8 | tail -1 | awk '{print $4}' | cut -d '/' -f 2
  return
}

# System RAM Stats and stuff. Executing a base64 encoded program in $envm/bin/free
free() {
	local path_to_exec=$envm/bin/free
	base64 -D $path_to_exec | python3
}

# create dir and cd into it
cddir () {
	mkdir -p $1
	cd $1
	return
}

# places a base ignore into the local repo
ignore() {
	cat $HOME/.gitignore >> $PWD/.gitignore
}

start_jupyter_lab() {
	cd $envm_wdir/ipynb/
	jupyter-lab
}

# Taken from https://github.com/jessfraz/dotfiles/blob/master/.functions
# Thank you github.com/jessfraz
# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

